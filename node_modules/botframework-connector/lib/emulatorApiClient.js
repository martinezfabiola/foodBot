"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
class EmulatorApiClient {
    static emulateOAuthCards(credentials, emulatorUrl, emulate) {
        return __awaiter(this, void 0, void 0, function* () {
            let token = yield credentials.getToken();
            return new Promise((resolve, reject) => {
                let requestUrl = emulatorUrl + (emulatorUrl.endsWith('/') ? '' : '/') + `api/usertoken/emulateOAuthCards?emulate=${(!!emulate).toString()}`;
                const opt = {
                    method: 'POST',
                    url: requestUrl,
                    auth: {
                        bearer: token
                    }
                };
                request(opt, (err, response, body) => {
                    if (response.statusCode && response.statusCode < 300) {
                        resolve(true);
                    }
                    else {
                        reject(new Error(`EmulateOAuthCards failed with status code: ${response.statusCode}`));
                    }
                });
            });
        });
    }
}
exports.EmulatorApiClient = EmulatorApiClient;
//# sourceMappingURL=emulatorApiClient.js.map